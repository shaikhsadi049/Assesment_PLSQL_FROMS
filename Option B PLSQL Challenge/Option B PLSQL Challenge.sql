/************************************************************************************
 *
 * Script Name:       generate_monthly_sales_summary.sql
 *
 * Author:            Shaikh Sadi
 * Date:              August 19, 2025
 *
 * Description:       This script sets up the necessary database schema for tracking
 * sales data and generating monthly summaries. It includes:
 * 1. Creation of 'sales' and 'monthly_sales_summary' tables.
 * 2. Insertion of sample sales data.
 * 3. A PL/SQL procedure to efficiently aggregate monthly sales
 * and populate the summary table.
 * 4. An example of how to execute the procedure and verify
 * the results.
 *
 ************************************************************************************/


/************************************************************************************
 * SECTION 1: SCHEMA SETUP
 * Description: Drops and creates the necessary tables for the application.
 ************************************************************************************/

-- Safely drop existing tables before creation to ensure a clean setup.
-- The exception handler ignores "table or view does not exist" errors (SQLCODE -942).
BEGIN
    EXECUTE IMMEDIATE 'DROP TABLE monthly_sales_summary';
    EXECUTE IMMEDIATE 'DROP TABLE sales';
EXCEPTION
    WHEN OTHERS THEN
        IF SQLCODE != -942 THEN
            RAISE;
        END IF;
END;
/

-- Create the 'sales' table to store individual transaction records.
CREATE TABLE sales (
    sale_id       NUMBER GENERATED BY DEFAULT AS IDENTITY,
    region        VARCHAR2(100) NOT NULL,
    sale_amount   NUMBER(10, 2) NOT NULL,
    sale_date     DATE NOT NULL,
    CONSTRAINT pk_sales PRIMARY KEY (sale_id)
);

-- Create the 'monthly_sales_summary' table to store aggregated results.
-- A unique constraint on region and month prevents duplicate summary entries.
CREATE TABLE monthly_sales_summary (
    summary_id      NUMBER GENERATED BY DEFAULT AS IDENTITY,
    region          VARCHAR2(100) NOT NULL,
    total_sales     NUMBER(15, 2) NOT NULL,
    summary_month   DATE NOT NULL,
    last_updated    TIMESTAMP DEFAULT SYSTIMESTAMP,
    CONSTRAINT pk_monthly_sales_summary PRIMARY KEY (summary_id),
    CONSTRAINT uq_region_month UNIQUE (region, summary_month)
);


/************************************************************************************
 * SECTION 2: SAMPLE DATA INSERTION
 * Description: Populates the 'sales' table with sample data for testing.
 ************************************************************************************/

INSERT INTO sales (region, sale_amount, sale_date) VALUES ('Selangor', 1500.50, DATE '2024-10-05');
INSERT INTO sales (region, sale_amount, sale_date) VALUES ('Johor', 2200.00, DATE '2024-10-08');
INSERT INTO sales (region, sale_amount, sale_date) VALUES ('Selangor', 800.00, DATE '2024-10-15');
INSERT INTO sales (region, sale_amount, sale_date) VALUES ('Penang', 3100.75, DATE '2024-10-20');
INSERT INTO sales (region, sale_amount, sale_date) VALUES ('Johor', 1800.25, DATE '2024-10-22');
INSERT INTO sales (region, sale_amount, sale_date) VALUES ('Perak', 950.00, DATE '2024-10-25');
INSERT INTO sales (region, sale_amount, sale_date) VALUES ('Sabah', 4500.00, DATE '2024-11-10');
INSERT INTO sales (region, sale_amount, sale_date) VALUES ('Selangor', 1200.00, DATE '2024-11-12');
INSERT INTO sales (region, sale_amount, sale_date) VALUES ('Penang', 2500.50, DATE '2024-11-18');
INSERT INTO sales (region, sale_amount, sale_date) VALUES ('Sarawak', 5200.00, DATE '2024-11-21');
INSERT INTO sales (region, sale_amount, sale_date) VALUES ('Pahang', 1750.75, DATE '2024-11-28');
INSERT INTO sales (region, sale_amount, sale_date) VALUES ('Johor', 2800.00, DATE '2024-12-02');
INSERT INTO sales (region, sale_amount, sale_date) VALUES ('Selangor', 1900.50, DATE '2024-12-07');
INSERT INTO sales (region, sale_amount, sale_date) VALUES ('Sarawak', 4800.00, DATE '2024-12-15');
INSERT INTO sales (region, sale_amount, sale_date) VALUES ('Perak', 1100.25, DATE '2024-12-20');

-- Commit the transaction to save the sample data permanently.
COMMIT;


/************************************************************************************
 * SECTION 3: PL/SQL PROCEDURE
 * Description: Aggregates sales data for a specific month and year, then uses a
 * bulk MERGE operation to insert or update the summary table.
 ************************************************************************************/

CREATE OR REPLACE PROCEDURE generate_monthly_sales_summary (
    p_year    IN    NUMBER,
    p_month   IN    NUMBER,
    p_count   OUT   NUMBER
)
AS
    -- Define collection types for bulk processing
    TYPE t_region_tab IS TABLE OF VARCHAR2(100);
    TYPE t_amount_tab IS TABLE OF NUMBER;

    v_regions   t_region_tab;
    v_amounts   t_amount_tab;
    v_month     DATE := TO_DATE(p_year || '-' || LPAD(p_month, 2, '0') || '-01', 'YYYY-MM-DD');

BEGIN
    -- Initialize the output counter
    p_count := 0;

    -- Efficiently fetch all aggregated sales data for the month into collections
    SELECT
        region,
        SUM(sale_amount)
    BULK COLLECT INTO
        v_regions, v_amounts
    FROM
        sales
    WHERE
        EXTRACT(YEAR FROM sale_date) = p_year
        AND EXTRACT(MONTH FROM sale_date) = p_month
    GROUP BY
        region;

    -- Proceed only if there is data to process
    IF v_regions.COUNT > 0 THEN

        -- Use FORALL for a high-performance bulk MERGE operation
        FORALL i IN 1 .. v_regions.COUNT
            MERGE INTO monthly_sales_summary s
            USING (
                SELECT v_regions(i) AS region, v_amounts(i) AS total_sales FROM DUAL
            ) d
            ON (s.region = d.region AND s.summary_month = v_month)
            WHEN MATCHED THEN
                -- If a summary for the region/month already exists, update it
                UPDATE SET
                    s.total_sales = d.total_sales,
                    s.last_updated = SYSTIMESTAMP
            WHEN NOT MATCHED THEN
                -- If no summary exists, insert a new record
                INSERT (region, total_sales, summary_month)
                VALUES (d.region, d.total_sales, v_month);

        -- Set the output parameter to the number of regions processed
        p_count := v_regions.COUNT;
    END IF;

    -- Commit the transaction to save the summary data
    COMMIT;

EXCEPTION
    WHEN NO_DATA_FOUND THEN
        -- This handles cases where the initial SELECT finds no data
        p_count := 0;
    WHEN DUP_VAL_ON_INDEX THEN
        -- Handle potential race conditions or unique constraint violations
        ROLLBACK;
        RAISE_APPLICATION_ERROR(-20002, 'Duplicate summary for region and month.');
    WHEN OTHERS THEN
        -- Handle all other unexpected errors
        ROLLBACK;
        RAISE_APPLICATION_ERROR(-20001, 'Unexpected error: ' || SQLERRM);
END;
/


/************************************************************************************
 * SECTION 4: EXECUTION EXAMPLE
 * Description: An anonymous block to demonstrate how to run the procedure.
 ************************************************************************************/
SET SERVEROUTPUT ON;

DECLARE
    v_count   NUMBER;
BEGIN
    -- Generate summaries for October, November, and December 2024
    generate_monthly_sales_summary(2024, 10, v_count);
    DBMS_OUTPUT.PUT_LINE('October rows processed: ' || v_count);

    generate_monthly_sales_summary(2024, 11, v_count);
    DBMS_OUTPUT.PUT_LINE('November rows processed: ' || v_count);

    generate_monthly_sales_summary(2024, 12, v_count);
    DBMS_OUTPUT.PUT_LINE('December rows processed: ' || v_count);
END;
/


/************************************************************************************
 * SECTION 5: VERIFICATION QUERY
 * Description: A query to check the final contents of the summary table.
 ************************************************************************************/

SELECT
    region,
    total_sales,
    TO_CHAR(summary_month, 'YYYY-MM') AS month,
    last_updated
FROM
    monthly_sales_summary
ORDER BY
    summary_month, region;

/************************************************************************************
 * END OF SCRIPT
 ************************************************************************************/